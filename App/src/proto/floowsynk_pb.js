// source: floowsynk.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.proto.ArrayDataType', null, global);
goog.exportSymbol('proto.proto.Credential', null, global);
goog.exportSymbol('proto.proto.Edge', null, global);
goog.exportSymbol('proto.proto.Empty', null, global);
goog.exportSymbol('proto.proto.GetWorkflowRequest', null, global);
goog.exportSymbol('proto.proto.Handle', null, global);
goog.exportSymbol('proto.proto.KeyValue', null, global);
goog.exportSymbol('proto.proto.Node', null, global);
goog.exportSymbol('proto.proto.NodeData', null, global);
goog.exportSymbol('proto.proto.NodeDataArray', null, global);
goog.exportSymbol('proto.proto.NodeDimensions', null, global);
goog.exportSymbol('proto.proto.NodeHandleBounds', null, global);
goog.exportSymbol('proto.proto.NodeIcon', null, global);
goog.exportSymbol('proto.proto.NodePosition', null, global);
goog.exportSymbol('proto.proto.NodeStatus', null, global);
goog.exportSymbol('proto.proto.PageRequest', null, global);
goog.exportSymbol('proto.proto.ReplayData', null, global);
goog.exportSymbol('proto.proto.RunWorkflowIdRequest', null, global);
goog.exportSymbol('proto.proto.RunWorkflowResponse', null, global);
goog.exportSymbol('proto.proto.Token', null, global);
goog.exportSymbol('proto.proto.Workflow', null, global);
goog.exportSymbol('proto.proto.WorkflowList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RunWorkflowIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RunWorkflowIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RunWorkflowIdRequest.displayName = 'proto.proto.RunWorkflowIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RunWorkflowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RunWorkflowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RunWorkflowResponse.displayName = 'proto.proto.RunWorkflowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ReplayData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ReplayData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ReplayData.displayName = 'proto.proto.ReplayData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Empty.displayName = 'proto.proto.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PageRequest.displayName = 'proto.proto.PageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Credential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Credential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Credential.displayName = 'proto.proto.Credential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Token.displayName = 'proto.proto.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetWorkflowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetWorkflowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetWorkflowRequest.displayName = 'proto.proto.GetWorkflowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WorkflowList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.WorkflowList.repeatedFields_, null);
};
goog.inherits(proto.proto.WorkflowList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.WorkflowList.displayName = 'proto.proto.WorkflowList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Workflow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Workflow.repeatedFields_, null);
};
goog.inherits(proto.proto.Workflow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Workflow.displayName = 'proto.proto.Workflow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Edge.displayName = 'proto.proto.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Node.repeatedFields_, null);
};
goog.inherits(proto.proto.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Node.displayName = 'proto.proto.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeData.displayName = 'proto.proto.NodeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeDataArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NodeDataArray.repeatedFields_, null);
};
goog.inherits(proto.proto.NodeDataArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeDataArray.displayName = 'proto.proto.NodeDataArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeIcon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodeIcon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeIcon.displayName = 'proto.proto.NodeIcon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeDimensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodeDimensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeDimensions.displayName = 'proto.proto.NodeDimensions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodePosition.displayName = 'proto.proto.NodePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.KeyValue.displayName = 'proto.proto.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeHandleBounds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NodeHandleBounds.repeatedFields_, null);
};
goog.inherits(proto.proto.NodeHandleBounds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeHandleBounds.displayName = 'proto.proto.NodeHandleBounds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Handle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Handle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Handle.displayName = 'proto.proto.Handle';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RunWorkflowIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RunWorkflowIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RunWorkflowIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RunWorkflowIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RunWorkflowIdRequest}
 */
proto.proto.RunWorkflowIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RunWorkflowIdRequest;
  return proto.proto.RunWorkflowIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RunWorkflowIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RunWorkflowIdRequest}
 */
proto.proto.RunWorkflowIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RunWorkflowIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RunWorkflowIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RunWorkflowIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RunWorkflowIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.RunWorkflowIdRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RunWorkflowIdRequest} returns this
 */
proto.proto.RunWorkflowIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RunWorkflowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RunWorkflowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RunWorkflowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RunWorkflowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: jspb.Message.getFieldWithDefault(msg, 2, 0),
data: (f = msg.getData()) && proto.proto.ReplayData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RunWorkflowResponse}
 */
proto.proto.RunWorkflowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RunWorkflowResponse;
  return proto.proto.RunWorkflowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RunWorkflowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RunWorkflowResponse}
 */
proto.proto.RunWorkflowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.NodeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.proto.ReplayData;
      reader.readMessage(value,proto.proto.ReplayData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RunWorkflowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RunWorkflowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RunWorkflowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RunWorkflowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.ReplayData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string nodeId = 1;
 * @return {string}
 */
proto.proto.RunWorkflowResponse.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RunWorkflowResponse} returns this
 */
proto.proto.RunWorkflowResponse.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeStatus status = 2;
 * @return {!proto.proto.NodeStatus}
 */
proto.proto.RunWorkflowResponse.prototype.getStatus = function() {
  return /** @type {!proto.proto.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.NodeStatus} value
 * @return {!proto.proto.RunWorkflowResponse} returns this
 */
proto.proto.RunWorkflowResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ReplayData data = 3;
 * @return {?proto.proto.ReplayData}
 */
proto.proto.RunWorkflowResponse.prototype.getData = function() {
  return /** @type{?proto.proto.ReplayData} */ (
    jspb.Message.getWrapperField(this, proto.proto.ReplayData, 3));
};


/**
 * @param {?proto.proto.ReplayData|undefined} value
 * @return {!proto.proto.RunWorkflowResponse} returns this
*/
proto.proto.RunWorkflowResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.RunWorkflowResponse} returns this
 */
proto.proto.RunWorkflowResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.RunWorkflowResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ReplayData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ReplayData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ReplayData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ReplayData.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
data: (f = msg.getData()) && proto.proto.NodeData.toObject(includeInstance, f),
variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, undefined) : [],
status: jspb.Message.getFieldWithDefault(msg, 4, ""),
message: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ReplayData}
 */
proto.proto.ReplayData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ReplayData;
  return proto.proto.ReplayData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ReplayData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ReplayData}
 */
proto.proto.ReplayData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = new proto.proto.NodeData;
      reader.readMessage(value,proto.proto.NodeData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ReplayData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ReplayData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ReplayData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ReplayData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.NodeData.serializeBinaryToWriter
    );
  }
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string nodeId = 1;
 * @return {string}
 */
proto.proto.ReplayData.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ReplayData} returns this
 */
proto.proto.ReplayData.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeData data = 2;
 * @return {?proto.proto.NodeData}
 */
proto.proto.ReplayData.prototype.getData = function() {
  return /** @type{?proto.proto.NodeData} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeData, 2));
};


/**
 * @param {?proto.proto.NodeData|undefined} value
 * @return {!proto.proto.ReplayData} returns this
*/
proto.proto.ReplayData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ReplayData} returns this
 */
proto.proto.ReplayData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ReplayData.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> variables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.ReplayData.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ReplayData} returns this
 */
proto.proto.ReplayData.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
  return this;
};


/**
 * optional string status = 4;
 * @return {string}
 */
proto.proto.ReplayData.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ReplayData} returns this
 */
proto.proto.ReplayData.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.proto.ReplayData.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ReplayData} returns this
 */
proto.proto.ReplayData.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Empty;
  return proto.proto.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PageRequest}
 */
proto.proto.PageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PageRequest;
  return proto.proto.PageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PageRequest}
 */
proto.proto.PageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.proto.PageRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.PageRequest} returns this
 */
proto.proto.PageRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.proto.PageRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.PageRequest} returns this
 */
proto.proto.PageRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Credential.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Credential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Credential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Credential.toObject = function(includeInstance, msg) {
  var f, obj = {
username: jspb.Message.getFieldWithDefault(msg, 1, ""),
password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Credential}
 */
proto.proto.Credential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Credential;
  return proto.proto.Credential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Credential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Credential}
 */
proto.proto.Credential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Credential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Credential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Credential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Credential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.proto.Credential.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Credential} returns this
 */
proto.proto.Credential.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.proto.Credential.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Credential} returns this
 */
proto.proto.Credential.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Token}
 */
proto.proto.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Token;
  return proto.proto.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Token}
 */
proto.proto.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.proto.Token.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Token} returns this
 */
proto.proto.Token.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetWorkflowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetWorkflowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetWorkflowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetWorkflowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetWorkflowRequest}
 */
proto.proto.GetWorkflowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetWorkflowRequest;
  return proto.proto.GetWorkflowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetWorkflowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetWorkflowRequest}
 */
proto.proto.GetWorkflowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetWorkflowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetWorkflowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetWorkflowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetWorkflowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.GetWorkflowRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetWorkflowRequest} returns this
 */
proto.proto.GetWorkflowRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.WorkflowList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.WorkflowList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.WorkflowList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.WorkflowList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WorkflowList.toObject = function(includeInstance, msg) {
  var f, obj = {
total: jspb.Message.getFieldWithDefault(msg, 1, 0),
workflowsList: jspb.Message.toObjectList(msg.getWorkflowsList(),
    proto.proto.Workflow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WorkflowList}
 */
proto.proto.WorkflowList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.WorkflowList;
  return proto.proto.WorkflowList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WorkflowList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WorkflowList}
 */
proto.proto.WorkflowList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 2:
      var value = new proto.proto.Workflow;
      reader.readMessage(value,proto.proto.Workflow.deserializeBinaryFromReader);
      msg.addWorkflows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WorkflowList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.WorkflowList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WorkflowList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WorkflowList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWorkflowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Workflow.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 total = 1;
 * @return {number}
 */
proto.proto.WorkflowList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.WorkflowList} returns this
 */
proto.proto.WorkflowList.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Workflow workflows = 2;
 * @return {!Array<!proto.proto.Workflow>}
 */
proto.proto.WorkflowList.prototype.getWorkflowsList = function() {
  return /** @type{!Array<!proto.proto.Workflow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Workflow, 2));
};


/**
 * @param {!Array<!proto.proto.Workflow>} value
 * @return {!proto.proto.WorkflowList} returns this
*/
proto.proto.WorkflowList.prototype.setWorkflowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Workflow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Workflow}
 */
proto.proto.WorkflowList.prototype.addWorkflows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Workflow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.WorkflowList} returns this
 */
proto.proto.WorkflowList.prototype.clearWorkflowsList = function() {
  return this.setWorkflowsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Workflow.repeatedFields_ = [4,5,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Workflow.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Workflow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Workflow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Workflow.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.proto.Node.toObject, includeInstance),
edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.proto.Edge.toObject, includeInstance),
type: jspb.Message.getFieldWithDefault(msg, 6, ""),
createdat: jspb.Message.getFieldWithDefault(msg, 7, ""),
updatedat: jspb.Message.getFieldWithDefault(msg, 8, ""),
createdby: jspb.Message.getFieldWithDefault(msg, 9, ""),
updatedby: jspb.Message.getFieldWithDefault(msg, 10, ""),
tagsList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
isnew: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Workflow}
 */
proto.proto.Workflow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Workflow;
  return proto.proto.Workflow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Workflow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Workflow}
 */
proto.proto.Workflow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.proto.Node;
      reader.readMessage(value,proto.proto.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 5:
      var value = new proto.proto.Edge;
      reader.readMessage(value,proto.proto.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedat(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedat(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedby(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedby(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnew(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Workflow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Workflow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Workflow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Workflow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.Edge.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatedby();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUpdatedby();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Workflow.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.Workflow.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.proto.Workflow.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Node nodes = 4;
 * @return {!Array<!proto.proto.Node>}
 */
proto.proto.Workflow.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Node, 4));
};


/**
 * @param {!Array<!proto.proto.Node>} value
 * @return {!proto.proto.Workflow} returns this
*/
proto.proto.Workflow.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Node}
 */
proto.proto.Workflow.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated Edge edges = 5;
 * @return {!Array<!proto.proto.Edge>}
 */
proto.proto.Workflow.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.proto.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Edge, 5));
};


/**
 * @param {!Array<!proto.proto.Edge>} value
 * @return {!proto.proto.Workflow} returns this
*/
proto.proto.Workflow.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Edge}
 */
proto.proto.Workflow.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.proto.Workflow.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string createdAt = 7;
 * @return {string}
 */
proto.proto.Workflow.prototype.getCreatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string updatedAt = 8;
 * @return {string}
 */
proto.proto.Workflow.prototype.getUpdatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string createdBy = 9;
 * @return {string}
 */
proto.proto.Workflow.prototype.getCreatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setCreatedby = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string updatedBy = 10;
 * @return {string}
 */
proto.proto.Workflow.prototype.getUpdatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setUpdatedby = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated string tags = 11;
 * @return {!Array<string>}
 */
proto.proto.Workflow.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional bool isNew = 12;
 * @return {boolean}
 */
proto.proto.Workflow.prototype.getIsnew = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.setIsnew = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Workflow} returns this
 */
proto.proto.Workflow.prototype.clearIsnew = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Workflow.prototype.hasIsnew = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
type: jspb.Message.getFieldWithDefault(msg, 2, ""),
label: jspb.Message.getFieldWithDefault(msg, 3, ""),
tabid: jspb.Message.getFieldWithDefault(msg, 4, ""),
source: jspb.Message.getFieldWithDefault(msg, 5, ""),
target: jspb.Message.getFieldWithDefault(msg, 6, ""),
sourcex: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
sourcey: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
targetx: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
targety: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
animated: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
sourcenode: (f = msg.getSourcenode()) && proto.proto.Node.toObject(includeInstance, f),
targetnode: (f = msg.getTargetnode()) && proto.proto.Node.toObject(includeInstance, f),
sourcehandle: jspb.Message.getFieldWithDefault(msg, 14, ""),
targethandle: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Edge}
 */
proto.proto.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Edge;
  return proto.proto.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Edge}
 */
proto.proto.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTabid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSourcex(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSourcey(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetx(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargety(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnimated(value);
      break;
    case 12:
      var value = new proto.proto.Node;
      reader.readMessage(value,proto.proto.Node.deserializeBinaryFromReader);
      msg.setSourcenode(value);
      break;
    case 13:
      var value = new proto.proto.Node;
      reader.readMessage(value,proto.proto.Node.deserializeBinaryFromReader);
      msg.setTargetnode(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcehandle(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargethandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTabid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSourcex();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getSourcey();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getTargetx();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getTargety();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAnimated();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSourcenode();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.Node.serializeBinaryToWriter
    );
  }
  f = message.getTargetnode();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.Node.serializeBinaryToWriter
    );
  }
  f = message.getSourcehandle();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getTargethandle();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Edge.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.proto.Edge.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.proto.Edge.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tabid = 4;
 * @return {string}
 */
proto.proto.Edge.prototype.getTabid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setTabid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string source = 5;
 * @return {string}
 */
proto.proto.Edge.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string target = 6;
 * @return {string}
 */
proto.proto.Edge.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional float sourcex = 7;
 * @return {number}
 */
proto.proto.Edge.prototype.getSourcex = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setSourcex = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float sourcey = 8;
 * @return {number}
 */
proto.proto.Edge.prototype.getSourcey = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setSourcey = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float targetx = 9;
 * @return {number}
 */
proto.proto.Edge.prototype.getTargetx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setTargetx = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float targety = 10;
 * @return {number}
 */
proto.proto.Edge.prototype.getTargety = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setTargety = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional bool animated = 11;
 * @return {boolean}
 */
proto.proto.Edge.prototype.getAnimated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setAnimated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional Node sourcenode = 12;
 * @return {?proto.proto.Node}
 */
proto.proto.Edge.prototype.getSourcenode = function() {
  return /** @type{?proto.proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.proto.Node, 12));
};


/**
 * @param {?proto.proto.Node|undefined} value
 * @return {!proto.proto.Edge} returns this
*/
proto.proto.Edge.prototype.setSourcenode = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.clearSourcenode = function() {
  return this.setSourcenode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Edge.prototype.hasSourcenode = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Node targetnode = 13;
 * @return {?proto.proto.Node}
 */
proto.proto.Edge.prototype.getTargetnode = function() {
  return /** @type{?proto.proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.proto.Node, 13));
};


/**
 * @param {?proto.proto.Node|undefined} value
 * @return {!proto.proto.Edge} returns this
*/
proto.proto.Edge.prototype.setTargetnode = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.clearTargetnode = function() {
  return this.setTargetnode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Edge.prototype.hasTargetnode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string sourcehandle = 14;
 * @return {string}
 */
proto.proto.Edge.prototype.getSourcehandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setSourcehandle = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string targethandle = 15;
 * @return {string}
 */
proto.proto.Edge.prototype.getTargethandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Edge} returns this
 */
proto.proto.Edge.prototype.setTargethandle = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Node.repeatedFields_ = [5,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
nodetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
label: jspb.Message.getFieldWithDefault(msg, 3, ""),
data: (f = msg.getData()) && proto.proto.NodeData.toObject(includeInstance, f),
groupList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
nodestyle: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
inputsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
outputsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
draggable: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
icon: (f = msg.getIcon()) && proto.proto.NodeIcon.toObject(includeInstance, f),
position: (f = msg.getPosition()) && proto.proto.NodePosition.toObject(includeInstance, f),
nodestatus: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
type: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
dimensions: (f = msg.getDimensions()) && proto.proto.NodeDimensions.toObject(includeInstance, f),
handlebounds: (f = msg.getHandlebounds()) && proto.proto.NodeHandleBounds.toObject(includeInstance, f),
computedposition: (f = msg.getComputedposition()) && proto.proto.NodePosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Node}
 */
proto.proto.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Node;
  return proto.proto.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Node}
 */
proto.proto.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = new proto.proto.NodeData;
      reader.readMessage(value,proto.proto.NodeData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGroup(values[i]);
      }
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodestyle(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutputs(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDraggable(value);
      break;
    case 10:
      var value = new proto.proto.NodeIcon;
      reader.readMessage(value,proto.proto.NodeIcon.deserializeBinaryFromReader);
      msg.setIcon(value);
      break;
    case 11:
      var value = new proto.proto.NodePosition;
      reader.readMessage(value,proto.proto.NodePosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodestatus(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 14:
      var value = new proto.proto.NodeDimensions;
      reader.readMessage(value,proto.proto.NodeDimensions.deserializeBinaryFromReader);
      msg.setDimensions(value);
      break;
    case 15:
      var value = new proto.proto.NodeHandleBounds;
      reader.readMessage(value,proto.proto.NodeHandleBounds.deserializeBinaryFromReader);
      msg.setHandlebounds(value);
      break;
    case 16:
      var value = new proto.proto.NodePosition;
      reader.readMessage(value,proto.proto.NodePosition.deserializeBinaryFromReader);
      msg.setComputedposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.NodeData.serializeBinaryToWriter
    );
  }
  f = message.getGroupList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIcon();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.NodeIcon.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.NodePosition.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDimensions();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.NodeDimensions.serializeBinaryToWriter
    );
  }
  f = message.getHandlebounds();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.proto.NodeHandleBounds.serializeBinaryToWriter
    );
  }
  f = message.getComputedposition();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.NodePosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Node.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nodetype = 2;
 * @return {string}
 */
proto.proto.Node.prototype.getNodetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setNodetype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.proto.Node.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional NodeData data = 4;
 * @return {?proto.proto.NodeData}
 */
proto.proto.Node.prototype.getData = function() {
  return /** @type{?proto.proto.NodeData} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeData, 4));
};


/**
 * @param {?proto.proto.NodeData|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 group = 5;
 * @return {!Array<number>}
 */
proto.proto.Node.prototype.getGroupList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setGroupList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.addGroup = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearGroupList = function() {
  return this.setGroupList([]);
};


/**
 * optional string nodestyle = 6;
 * @return {string}
 */
proto.proto.Node.prototype.getNodestyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setNodestyle = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearNodestyle = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasNodestyle = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string inputs = 7;
 * @return {!Array<string>}
 */
proto.proto.Node.prototype.getInputsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setInputsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.addInputs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated string outputs = 8;
 * @return {!Array<string>}
 */
proto.proto.Node.prototype.getOutputsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setOutputsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.addOutputs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional bool draggable = 9;
 * @return {boolean}
 */
proto.proto.Node.prototype.getDraggable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setDraggable = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearDraggable = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasDraggable = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional NodeIcon icon = 10;
 * @return {?proto.proto.NodeIcon}
 */
proto.proto.Node.prototype.getIcon = function() {
  return /** @type{?proto.proto.NodeIcon} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeIcon, 10));
};


/**
 * @param {?proto.proto.NodeIcon|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setIcon = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearIcon = function() {
  return this.setIcon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasIcon = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NodePosition position = 11;
 * @return {?proto.proto.NodePosition}
 */
proto.proto.Node.prototype.getPosition = function() {
  return /** @type{?proto.proto.NodePosition} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodePosition, 11));
};


/**
 * @param {?proto.proto.NodePosition|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string nodestatus = 12;
 * @return {string}
 */
proto.proto.Node.prototype.getNodestatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setNodestatus = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearNodestatus = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasNodestatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string type = 13;
 * @return {string}
 */
proto.proto.Node.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.setType = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearType = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasType = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional NodeDimensions dimensions = 14;
 * @return {?proto.proto.NodeDimensions}
 */
proto.proto.Node.prototype.getDimensions = function() {
  return /** @type{?proto.proto.NodeDimensions} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeDimensions, 14));
};


/**
 * @param {?proto.proto.NodeDimensions|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setDimensions = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearDimensions = function() {
  return this.setDimensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasDimensions = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NodeHandleBounds handleBounds = 15;
 * @return {?proto.proto.NodeHandleBounds}
 */
proto.proto.Node.prototype.getHandlebounds = function() {
  return /** @type{?proto.proto.NodeHandleBounds} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeHandleBounds, 15));
};


/**
 * @param {?proto.proto.NodeHandleBounds|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setHandlebounds = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearHandlebounds = function() {
  return this.setHandlebounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasHandlebounds = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NodePosition computedPosition = 16;
 * @return {?proto.proto.NodePosition}
 */
proto.proto.Node.prototype.getComputedposition = function() {
  return /** @type{?proto.proto.NodePosition} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodePosition, 16));
};


/**
 * @param {?proto.proto.NodePosition|undefined} value
 * @return {!proto.proto.Node} returns this
*/
proto.proto.Node.prototype.setComputedposition = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Node} returns this
 */
proto.proto.Node.prototype.clearComputedposition = function() {
  return this.setComputedposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Node.prototype.hasComputedposition = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeData.toObject = function(includeInstance, msg) {
  var f, obj = {
name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
expression: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
iteration: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
listvar: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
limit: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
url: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
method: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
headers: (f = msg.getHeaders()) && proto.proto.NodeDataArray.toObject(includeInstance, f),
payload: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
variable: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
message: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
list: (f = msg.getList()) && proto.proto.NodeDataArray.toObject(includeInstance, f),
listvariable: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
template: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
text: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
pattern: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
replacetext: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
subprocessid: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
type: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
interval: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
weeks: (f = msg.getWeeks()) && proto.proto.NodeDataArray.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeData}
 */
proto.proto.NodeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeData;
  return proto.proto.NodeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeData}
 */
proto.proto.NodeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIteration(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setListvar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 9:
      var value = new proto.proto.NodeDataArray;
      reader.readMessage(value,proto.proto.NodeDataArray.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 13:
      var value = new proto.proto.NodeDataArray;
      reader.readMessage(value,proto.proto.NodeDataArray.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setListvariable(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplate(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplacetext(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubprocessid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterval(value);
      break;
    case 22:
      var value = new proto.proto.NodeDataArray;
      reader.readMessage(value,proto.proto.NodeDataArray.deserializeBinaryFromReader);
      msg.setWeeks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.NodeDataArray.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.NodeDataArray.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getWeeks();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.proto.NodeDataArray.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.NodeData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.proto.NodeData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string expression = 3;
 * @return {string}
 */
proto.proto.NodeData.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setExpression = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearExpression = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasExpression = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 iteration = 4;
 * @return {number}
 */
proto.proto.NodeData.prototype.getIteration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setIteration = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearIteration = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasIteration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string listvar = 5;
 * @return {string}
 */
proto.proto.NodeData.prototype.getListvar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setListvar = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearListvar = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasListvar = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 limit = 6;
 * @return {number}
 */
proto.proto.NodeData.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string url = 7;
 * @return {string}
 */
proto.proto.NodeData.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string method = 8;
 * @return {string}
 */
proto.proto.NodeData.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setMethod = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearMethod = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NodeDataArray headers = 9;
 * @return {?proto.proto.NodeDataArray}
 */
proto.proto.NodeData.prototype.getHeaders = function() {
  return /** @type{?proto.proto.NodeDataArray} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeDataArray, 9));
};


/**
 * @param {?proto.proto.NodeDataArray|undefined} value
 * @return {!proto.proto.NodeData} returns this
*/
proto.proto.NodeData.prototype.setHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string payload = 10;
 * @return {string}
 */
proto.proto.NodeData.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setPayload = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearPayload = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string variable = 11;
 * @return {string}
 */
proto.proto.NodeData.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setVariable = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearVariable = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string message = 12;
 * @return {string}
 */
proto.proto.NodeData.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NodeDataArray list = 13;
 * @return {?proto.proto.NodeDataArray}
 */
proto.proto.NodeData.prototype.getList = function() {
  return /** @type{?proto.proto.NodeDataArray} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeDataArray, 13));
};


/**
 * @param {?proto.proto.NodeDataArray|undefined} value
 * @return {!proto.proto.NodeData} returns this
*/
proto.proto.NodeData.prototype.setList = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasList = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string listVariable = 14;
 * @return {string}
 */
proto.proto.NodeData.prototype.getListvariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setListvariable = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearListvariable = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasListvariable = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string template = 15;
 * @return {string}
 */
proto.proto.NodeData.prototype.getTemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setTemplate = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearTemplate = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasTemplate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string text = 16;
 * @return {string}
 */
proto.proto.NodeData.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setText = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearText = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasText = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string pattern = 17;
 * @return {string}
 */
proto.proto.NodeData.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setPattern = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearPattern = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string replaceText = 18;
 * @return {string}
 */
proto.proto.NodeData.prototype.getReplacetext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setReplacetext = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearReplacetext = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasReplacetext = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string subProcessId = 19;
 * @return {string}
 */
proto.proto.NodeData.prototype.getSubprocessid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setSubprocessid = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearSubprocessid = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasSubprocessid = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string type = 20;
 * @return {string}
 */
proto.proto.NodeData.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setType = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearType = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasType = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int32 interval = 21;
 * @return {number}
 */
proto.proto.NodeData.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.setInterval = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearInterval = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional NodeDataArray weeks = 22;
 * @return {?proto.proto.NodeDataArray}
 */
proto.proto.NodeData.prototype.getWeeks = function() {
  return /** @type{?proto.proto.NodeDataArray} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeDataArray, 22));
};


/**
 * @param {?proto.proto.NodeDataArray|undefined} value
 * @return {!proto.proto.NodeData} returns this
*/
proto.proto.NodeData.prototype.setWeeks = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.NodeData} returns this
 */
proto.proto.NodeData.prototype.clearWeeks = function() {
  return this.setWeeks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeData.prototype.hasWeeks = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NodeDataArray.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeDataArray.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeDataArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeDataArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeDataArray.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
keyvalueitemsList: jspb.Message.toObjectList(msg.getKeyvalueitemsList(),
    proto.proto.KeyValue.toObject, includeInstance),
stringitemsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
intitemsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
boolitemsList: (f = jspb.Message.getRepeatedBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeDataArray}
 */
proto.proto.NodeDataArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeDataArray;
  return proto.proto.NodeDataArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeDataArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeDataArray}
 */
proto.proto.NodeDataArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ArrayDataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.proto.KeyValue;
      reader.readMessage(value,proto.proto.KeyValue.deserializeBinaryFromReader);
      msg.addKeyvalueitems(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addStringitems(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIntitems(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBoolitems(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeDataArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeDataArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeDataArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeDataArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeyvalueitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStringitemsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getIntitemsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getBoolitemsList();
  if (f.length > 0) {
    writer.writePackedBool(
      5,
      f
    );
  }
};


/**
 * optional ArrayDataType type = 1;
 * @return {!proto.proto.ArrayDataType}
 */
proto.proto.NodeDataArray.prototype.getType = function() {
  return /** @type {!proto.proto.ArrayDataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.ArrayDataType} value
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated KeyValue keyValueItems = 2;
 * @return {!Array<!proto.proto.KeyValue>}
 */
proto.proto.NodeDataArray.prototype.getKeyvalueitemsList = function() {
  return /** @type{!Array<!proto.proto.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.KeyValue, 2));
};


/**
 * @param {!Array<!proto.proto.KeyValue>} value
 * @return {!proto.proto.NodeDataArray} returns this
*/
proto.proto.NodeDataArray.prototype.setKeyvalueitemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.KeyValue}
 */
proto.proto.NodeDataArray.prototype.addKeyvalueitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.clearKeyvalueitemsList = function() {
  return this.setKeyvalueitemsList([]);
};


/**
 * repeated string stringItems = 3;
 * @return {!Array<string>}
 */
proto.proto.NodeDataArray.prototype.getStringitemsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.setStringitemsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.addStringitems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.clearStringitemsList = function() {
  return this.setStringitemsList([]);
};


/**
 * repeated int32 intItems = 4;
 * @return {!Array<number>}
 */
proto.proto.NodeDataArray.prototype.getIntitemsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.setIntitemsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.addIntitems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.clearIntitemsList = function() {
  return this.setIntitemsList([]);
};


/**
 * repeated bool boolItems = 5;
 * @return {!Array<boolean>}
 */
proto.proto.NodeDataArray.prototype.getBoolitemsList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 5));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.setBoolitemsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.addBoolitems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeDataArray} returns this
 */
proto.proto.NodeDataArray.prototype.clearBoolitemsList = function() {
  return this.setBoolitemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeIcon.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeIcon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeIcon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeIcon.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
color: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeIcon}
 */
proto.proto.NodeIcon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeIcon;
  return proto.proto.NodeIcon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeIcon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeIcon}
 */
proto.proto.NodeIcon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeIcon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeIcon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeIcon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeIcon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.NodeIcon.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeIcon} returns this
 */
proto.proto.NodeIcon.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.proto.NodeIcon.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeIcon} returns this
 */
proto.proto.NodeIcon.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeDimensions.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeDimensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeDimensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeDimensions.toObject = function(includeInstance, msg) {
  var f, obj = {
width: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
height: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeDimensions}
 */
proto.proto.NodeDimensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeDimensions;
  return proto.proto.NodeDimensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeDimensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeDimensions}
 */
proto.proto.NodeDimensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeDimensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeDimensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeDimensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeDimensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float width = 1;
 * @return {number}
 */
proto.proto.NodeDimensions.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeDimensions} returns this
 */
proto.proto.NodeDimensions.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float height = 2;
 * @return {number}
 */
proto.proto.NodeDimensions.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeDimensions} returns this
 */
proto.proto.NodeDimensions.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
z: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodePosition}
 */
proto.proto.NodePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodePosition;
  return proto.proto.NodePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodePosition}
 */
proto.proto.NodePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.proto.NodePosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodePosition} returns this
 */
proto.proto.NodePosition.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.proto.NodePosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodePosition} returns this
 */
proto.proto.NodePosition.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.proto.NodePosition.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodePosition} returns this
 */
proto.proto.NodePosition.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.NodePosition} returns this
 */
proto.proto.NodePosition.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodePosition.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyValue}
 */
proto.proto.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.KeyValue;
  return proto.proto.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyValue}
 */
proto.proto.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.proto.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyValue} returns this
 */
proto.proto.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.proto.KeyValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyValue} returns this
 */
proto.proto.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NodeHandleBounds.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeHandleBounds.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeHandleBounds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeHandleBounds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeHandleBounds.toObject = function(includeInstance, msg) {
  var f, obj = {
sourceList: jspb.Message.toObjectList(msg.getSourceList(),
    proto.proto.Handle.toObject, includeInstance),
targetList: jspb.Message.toObjectList(msg.getTargetList(),
    proto.proto.Handle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeHandleBounds}
 */
proto.proto.NodeHandleBounds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeHandleBounds;
  return proto.proto.NodeHandleBounds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeHandleBounds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeHandleBounds}
 */
proto.proto.NodeHandleBounds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Handle;
      reader.readMessage(value,proto.proto.Handle.deserializeBinaryFromReader);
      msg.addSource(value);
      break;
    case 2:
      var value = new proto.proto.Handle;
      reader.readMessage(value,proto.proto.Handle.deserializeBinaryFromReader);
      msg.addTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeHandleBounds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeHandleBounds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeHandleBounds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeHandleBounds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Handle.serializeBinaryToWriter
    );
  }
  f = message.getTargetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Handle.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Handle source = 1;
 * @return {!Array<!proto.proto.Handle>}
 */
proto.proto.NodeHandleBounds.prototype.getSourceList = function() {
  return /** @type{!Array<!proto.proto.Handle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Handle, 1));
};


/**
 * @param {!Array<!proto.proto.Handle>} value
 * @return {!proto.proto.NodeHandleBounds} returns this
*/
proto.proto.NodeHandleBounds.prototype.setSourceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Handle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Handle}
 */
proto.proto.NodeHandleBounds.prototype.addSource = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Handle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeHandleBounds} returns this
 */
proto.proto.NodeHandleBounds.prototype.clearSourceList = function() {
  return this.setSourceList([]);
};


/**
 * repeated Handle target = 2;
 * @return {!Array<!proto.proto.Handle>}
 */
proto.proto.NodeHandleBounds.prototype.getTargetList = function() {
  return /** @type{!Array<!proto.proto.Handle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Handle, 2));
};


/**
 * @param {!Array<!proto.proto.Handle>} value
 * @return {!proto.proto.NodeHandleBounds} returns this
*/
proto.proto.NodeHandleBounds.prototype.setTargetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Handle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Handle}
 */
proto.proto.NodeHandleBounds.prototype.addTarget = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Handle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeHandleBounds} returns this
 */
proto.proto.NodeHandleBounds.prototype.clearTargetList = function() {
  return this.setTargetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Handle.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Handle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Handle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Handle.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
id: jspb.Message.getFieldWithDefault(msg, 3, ""),
type: jspb.Message.getFieldWithDefault(msg, 4, ""),
width: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
height: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
nodeid: jspb.Message.getFieldWithDefault(msg, 7, ""),
position: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Handle}
 */
proto.proto.Handle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Handle;
  return proto.proto.Handle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Handle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Handle}
 */
proto.proto.Handle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Handle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Handle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Handle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Handle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.proto.Handle.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.proto.Handle.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.proto.Handle.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.proto.Handle.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float width = 5;
 * @return {number}
 */
proto.proto.Handle.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float height = 6;
 * @return {number}
 */
proto.proto.Handle.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string nodeId = 7;
 * @return {string}
 */
proto.proto.Handle.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string position = 8;
 * @return {string}
 */
proto.proto.Handle.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Handle} returns this
 */
proto.proto.Handle.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * @enum {number}
 */
proto.proto.ArrayDataType = {
  STRING: 0,
  INT: 1,
  BOOL: 2,
  KEYVALUE: 3
};

/**
 * @enum {number}
 */
proto.proto.NodeStatus = {
  RUNNING: 0,
  COMPLETED: 1,
  FAILED: 2,
  INFO: 3
};

goog.object.extend(exports, proto.proto);
