/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: floowsynk.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = require('./floowsynk_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.LoginServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.LoginServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Credential,
 *   !proto.proto.Token>}
 */
const methodDescriptor_LoginService_Login = new grpc.web.MethodDescriptor(
  '/proto.LoginService/Login',
  grpc.web.MethodType.UNARY,
  proto.proto.Credential,
  proto.proto.Token,
  /**
   * @param {!proto.proto.Credential} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Token.deserializeBinary
);


/**
 * @param {!proto.proto.Credential} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Token)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Token>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.LoginServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.LoginService/Login',
      request,
      metadata || {},
      methodDescriptor_LoginService_Login,
      callback);
};


/**
 * @param {!proto.proto.Credential} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Token>}
 *     Promise that resolves to the response
 */
proto.proto.LoginServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.LoginService/Login',
      request,
      metadata || {},
      methodDescriptor_LoginService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Empty,
 *   !proto.proto.Token>}
 */
const methodDescriptor_LoginService_ExtendToken = new grpc.web.MethodDescriptor(
  '/proto.LoginService/ExtendToken',
  grpc.web.MethodType.UNARY,
  proto.proto.Empty,
  proto.proto.Token,
  /**
   * @param {!proto.proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Token.deserializeBinary
);


/**
 * @param {!proto.proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Token)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Token>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.LoginServiceClient.prototype.extendToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.LoginService/ExtendToken',
      request,
      metadata || {},
      methodDescriptor_LoginService_ExtendToken,
      callback);
};


/**
 * @param {!proto.proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Token>}
 *     Promise that resolves to the response
 */
proto.proto.LoginServicePromiseClient.prototype.extendToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.LoginService/ExtendToken',
      request,
      metadata || {},
      methodDescriptor_LoginService_ExtendToken);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.WorkflowServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.WorkflowServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetWorkflowRequest,
 *   !proto.proto.Workflow>}
 */
const methodDescriptor_WorkflowService_GetWorkflow = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/GetWorkflow',
  grpc.web.MethodType.UNARY,
  proto.proto.GetWorkflowRequest,
  proto.proto.Workflow,
  /**
   * @param {!proto.proto.GetWorkflowRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Workflow.deserializeBinary
);


/**
 * @param {!proto.proto.GetWorkflowRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Workflow)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Workflow>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.getWorkflow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.WorkflowService/GetWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_GetWorkflow,
      callback);
};


/**
 * @param {!proto.proto.GetWorkflowRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Workflow>}
 *     Promise that resolves to the response
 */
proto.proto.WorkflowServicePromiseClient.prototype.getWorkflow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.WorkflowService/GetWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_GetWorkflow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PageRequest,
 *   !proto.proto.WorkflowList>}
 */
const methodDescriptor_WorkflowService_ListWorkflows = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/ListWorkflows',
  grpc.web.MethodType.UNARY,
  proto.proto.PageRequest,
  proto.proto.WorkflowList,
  /**
   * @param {!proto.proto.PageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.WorkflowList.deserializeBinary
);


/**
 * @param {!proto.proto.PageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.WorkflowList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.WorkflowList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.listWorkflows =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.WorkflowService/ListWorkflows',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_ListWorkflows,
      callback);
};


/**
 * @param {!proto.proto.PageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.WorkflowList>}
 *     Promise that resolves to the response
 */
proto.proto.WorkflowServicePromiseClient.prototype.listWorkflows =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.WorkflowService/ListWorkflows',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_ListWorkflows);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Workflow,
 *   !proto.proto.Workflow>}
 */
const methodDescriptor_WorkflowService_UpdateWorkflow = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/UpdateWorkflow',
  grpc.web.MethodType.UNARY,
  proto.proto.Workflow,
  proto.proto.Workflow,
  /**
   * @param {!proto.proto.Workflow} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Workflow.deserializeBinary
);


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Workflow)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Workflow>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.updateWorkflow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.WorkflowService/UpdateWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_UpdateWorkflow,
      callback);
};


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Workflow>}
 *     Promise that resolves to the response
 */
proto.proto.WorkflowServicePromiseClient.prototype.updateWorkflow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.WorkflowService/UpdateWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_UpdateWorkflow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Workflow,
 *   !proto.proto.Workflow>}
 */
const methodDescriptor_WorkflowService_CreateWorkflow = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/CreateWorkflow',
  grpc.web.MethodType.UNARY,
  proto.proto.Workflow,
  proto.proto.Workflow,
  /**
   * @param {!proto.proto.Workflow} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Workflow.deserializeBinary
);


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Workflow)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Workflow>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.createWorkflow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.WorkflowService/CreateWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_CreateWorkflow,
      callback);
};


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Workflow>}
 *     Promise that resolves to the response
 */
proto.proto.WorkflowServicePromiseClient.prototype.createWorkflow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.WorkflowService/CreateWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_CreateWorkflow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Workflow,
 *   !proto.proto.Empty>}
 */
const methodDescriptor_WorkflowService_DeleteWorkflow = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/DeleteWorkflow',
  grpc.web.MethodType.UNARY,
  proto.proto.Workflow,
  proto.proto.Empty,
  /**
   * @param {!proto.proto.Workflow} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Empty.deserializeBinary
);


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.deleteWorkflow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.WorkflowService/DeleteWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_DeleteWorkflow,
      callback);
};


/**
 * @param {!proto.proto.Workflow} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Empty>}
 *     Promise that resolves to the response
 */
proto.proto.WorkflowServicePromiseClient.prototype.deleteWorkflow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.WorkflowService/DeleteWorkflow',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_DeleteWorkflow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.Workflow,
 *   !proto.proto.RunWorkflowResponse>}
 */
const methodDescriptor_WorkflowService_QuickRun = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/QuickRun',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.Workflow,
  proto.proto.RunWorkflowResponse,
  /**
   * @param {!proto.proto.Workflow} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.RunWorkflowResponse.deserializeBinary
);


/**
 * @param {!proto.proto.Workflow} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.RunWorkflowResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.quickRun =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.WorkflowService/QuickRun',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_QuickRun);
};


/**
 * @param {!proto.proto.Workflow} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.RunWorkflowResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServicePromiseClient.prototype.quickRun =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.WorkflowService/QuickRun',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_QuickRun);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.RunWorkflowIdRequest,
 *   !proto.proto.RunWorkflowResponse>}
 */
const methodDescriptor_WorkflowService_RunWorkflowId = new grpc.web.MethodDescriptor(
  '/proto.WorkflowService/RunWorkflowId',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.RunWorkflowIdRequest,
  proto.proto.RunWorkflowResponse,
  /**
   * @param {!proto.proto.RunWorkflowIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.RunWorkflowResponse.deserializeBinary
);


/**
 * @param {!proto.proto.RunWorkflowIdRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.RunWorkflowResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServiceClient.prototype.runWorkflowId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.WorkflowService/RunWorkflowId',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_RunWorkflowId);
};


/**
 * @param {!proto.proto.RunWorkflowIdRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.RunWorkflowResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.WorkflowServicePromiseClient.prototype.runWorkflowId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.WorkflowService/RunWorkflowId',
      request,
      metadata || {},
      methodDescriptor_WorkflowService_RunWorkflowId);
};


module.exports = proto.proto;

